@page "/"
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using BlazorAdmin.Constants
@using BlazorAdmin.Services
@inject AuthService Auth
@inject HttpClient Http
@inject SecureHttpClient SecureHttp

<h1>Manage Product Catalog</h1>

@if (catalogItems == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th></th>
                <th>Item Type</th>
                <th>Brand</th>
                <th>Id</th>
                <th>Name</th>
                <th>@nameof(CatalogItem.Description)</th>
                <th>@nameof(CatalogItem.Price)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in catalogItems)
            {
                <tr>
                    <td>
                        <img class="esh-thumbnail" src="@($"https://localhost:44315/{item.PictureUri}")">
                    </td>
                    <td>@GetTypeName(item.CatalogTypeId)</td>
                    <td>@GetBrandName(item.CatalogBrandId)</td>
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@item.Price</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<CatalogItem> catalogItems = new List<CatalogItem>();
    private List<CatalogType> catalogTypes = new List<CatalogType>();
    private List<CatalogBrand> catalogBrands = new List<CatalogBrand>();

    protected override async Task OnInitializedAsync()
    {
        catalogItems = (await Http.GetFromJsonAsync<PagedCatalogItemResult>($"{GeneralConstants.API_URL}catalog-items?PageSize=50")).CatalogItems;
        catalogTypes = (await Http.GetFromJsonAsync<CatalogTypeResult>($"{GeneralConstants.API_URL}catalog-types")).CatalogTypes;
        catalogBrands = await new CatalogBrandService(Auth).GetCatalogBrandsAsync();
        //catalogBrands = await SecureHttp.GetCatalogBrandsAsync();
    }

    protected string GetTypeName(int typeId)
    {
        return catalogTypes.FirstOrDefault(t => t.Id == typeId)?.Name;
    }

    protected string GetBrandName(int brandId)
    {
        var brand = catalogBrands.FirstOrDefault(t => t.Id == brandId);

        if (brand == null) return "None";
        return brand.Name;
    }

    public class PagedCatalogItemResult
    {
        public List<CatalogItem> CatalogItems { get; set; } = new List<CatalogItem>();
        public int PageCount { get; set; } = 0;
    }

    public class CatalogTypeResult
    {
        public List<CatalogType> CatalogTypes { get; set; } = new List<CatalogType>();
    }

    public class CatalogType
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }


    public class CatalogItem
    {
        public int Id { get; set; }
        public int CatalogTypeId { get; set; }
        public int CatalogBrandId { get; set; }

        public string Name { get; set; }
        public string Description { get; set; }
        public decimal Price { get; set; }
        public string PictureUri { get; set; }
    }
}
